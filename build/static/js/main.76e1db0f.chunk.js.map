{"version":3,"sources":["components/SortNames.js","components/TotalAmount.js","components/Filter.js","components/NamesList.js","services/nameService.js","App.js","index.js"],"names":["SortNames","sortType","handleSortType","id","htmlFor","name","onChange","value","TotalAmount","names","map","person","amount","reduce","accumulator","currentValue","Filter","searchPhrase","handleSearch","NamesList","showAll","persons","filter","toUpperCase","includes","length","sort","a","b","axios","get","App","useState","setNames","setSortType","setSearchPhrase","setShowAll","useEffect","nameService","then","response","data","event","target","ReactDOM","render","document","getElementById"],"mappings":"qTAceA,EAZG,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,eAC3B,OACI,sBAAKC,GAAG,qBAAR,UACI,uBAAOC,QAAQ,QAAf,wBAAyC,uBACzC,yBAAQC,KAAK,QAAQF,GAAG,iBAAiBG,SAAWJ,EAAiBK,MAAQN,EAA7E,UACI,wBAAQM,MAAM,WAAd,2CACA,wBAAQA,MAAM,QAAd,0CCUDC,EAhBK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAQnB,OACI,sBAAKN,GAAG,uBAAR,UACI,8DACA,mBAAGA,GAAG,cAAN,SARgBM,EAAMC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,UAC5BC,QAFJ,SAAEC,EAAaC,GAAf,OAAiCD,EAAcC,IAE1B,SCK9BC,EATA,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC5B,OACI,sBAAKf,GAAG,kBAAR,UACI,kDACA,uBAAOI,MAAQU,EAAeX,SAAWY,QCwDtCC,EA5DG,SAAC,GAKQ,IAJPV,EAIM,EAJNA,MACAR,EAGM,EAHNA,SACAmB,EAEM,EAFNA,QACAH,EACM,EADNA,aAEVI,EACFD,EACIX,EACAA,EAAMa,QAAQ,SAAAX,GAAM,OAAIA,EAAON,KAAKkB,cAAcC,SAAUP,EAAaM,kBA8CjF,OACI,qBAAKpB,GAAG,qBAAR,SApBKkB,EAAQI,OAAS,EAEd,kCACI,gCACI,+BACI,sCACA,6CAGR,gCAjCM,WAAbxB,GACDoB,EAAQK,MAAK,SAAEC,EAAGC,GAAL,OAAYA,EAAEhB,OAASe,EAAEf,UAC/BS,EAAQX,KAAK,SAAAL,GAAI,OAAI,+BACI,6BAAwBA,EAAKA,MAAnBA,EAAKA,MACf,6BAA0BA,EAAKO,QAArBP,EAAKO,UAFTP,EAAKA,UAM7B,aAAbJ,GACDoB,EAAQK,MAAK,SAAEC,EAAGC,GACd,OAAKD,EAAEtB,KAAOuB,EAAEvB,MAAe,EAC1BsB,EAAEtB,KAAOuB,EAAEvB,KAAc,EACvB,KAEJgB,EAAQX,KAAK,SAAAL,GAAI,OAAI,+BACI,6BAAwBA,EAAKA,MAAnBA,EAAKA,MACf,6BAA0BA,EAAKO,QAArBP,EAAKO,UAFTP,EAAKA,UAMnC,UAoBA,qE,iBChDL,EAJE,WACb,OAAOwB,IAAMC,IAAK,eCiDPC,G,8BAxCH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACRvB,EADQ,KACDwB,EADC,OAGkBD,mBAAU,UAH5B,mBAGR/B,EAHQ,KAGEiC,EAHF,OAI0BF,mBAAU,IAJpC,mBAIRf,EAJQ,KAIMkB,EAJN,OAKgBH,oBAAU,GAL1B,mBAKRZ,EALQ,KAKCgB,EALD,KAOhBC,qBAAU,WACRC,IAEGC,MAAM,SAAAC,GACLP,EAAUO,EAASC,WAEtB,IAEH,IAAMvC,EAAiB,WACrBgC,EAA0B,WAAbjC,EAAwB,WAAa,WASpD,OACE,sBAAKE,GAAG,eAAR,UACE,6DACA,cAAC,EAAD,CAAWD,eAAiBA,IAC5B,cAAC,EAAD,CAAQe,aAAeA,EAAeC,aAVrB,SAAEwB,GACrBN,GAAY,GACZD,EAAiBO,EAAMC,OAAOpC,OACF,KAAvBmC,EAAMC,OAAOpC,OAAe6B,GAAY,MAQ3C,cAAC,EAAD,CAAW3B,MAAQA,EACRR,SAAWA,EACXmB,QAAUA,EACVH,aAAeA,EACff,eAAiBA,IAC5B,cAAC,EAAD,CAAaO,MAAQA,SC3C3BmC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.76e1db0f.chunk.js","sourcesContent":["import React from 'react'\n\nconst SortNames = ({ sortType, handleSortType }) => {\n    return (\n        <div id='sortNamesContainer'>\n            <label htmlFor='names'>Sort names</label><br></br>\n            <select name='names' id='selectSortType' onChange={ handleSortType } value={ sortType }>\n                <option value='byAmount'>by amount, most popular first</option>\n                <option value='inABC'>in alphabetical order</option>\n            </select>\n        </div>\n    )\n}\n\nexport default SortNames","import React from 'react'\n\nconst TotalAmount = ({ names }) => {\n    const renderTotalAmount = () => {\n        const reducer = ( accumulator, currentValue ) => accumulator + currentValue\n        const totalAmount = names.map( person => person.amount )\n                           .reduce( reducer, 0 )\n        return totalAmount\n    }\n\n    return (\n        <div id='totalAmountContainer'>\n            <p>Total amount of all the names</p>\n            <p id='totalAmount'>{ renderTotalAmount() }</p>\n        </div>\n    )\n}\n\nexport default TotalAmount","import React from 'react'\n\nconst Filter = ({ searchPhrase, handleSearch }) => {\n    return (\n        <div id='filterContainer'>\n            <p>Search for a name</p>\n            <input value={ searchPhrase } onChange={ handleSearch }></input>\n        </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst NamesList = ({\n                    names,\n                    sortType,\n                    showAll,\n                    searchPhrase\n                    }) => {\n    const persons =\n        showAll ?\n            names : \n            names.filter( person => person.name.toUpperCase().includes( searchPhrase.toUpperCase() ))\n\n    const renderNames = () => {\n        if ( sortType === 'amount' ) {\n            persons.sort(( a, b ) => b.amount - a.amount )\n            return persons.map( name => <tr key={ name.name }>\n                                            <td key={ name.name }>{ name.name }</td>\n                                            <td key={ name.amount }>{ name.amount }</td>\n                                        </tr> )\n        }\n\n        if ( sortType === 'alphabet' ) {\n            persons.sort(( a, b ) => {\n                if ( a.name < b.name ) return -1\n                if ( a.name > b.name ) return 1\n                return 0\n            })\n            return persons.map( name => <tr key={ name.name }>\n                                            <td key={ name.name }>{ name.name }</td>\n                                            <td key={ name.amount }>{ name.amount }</td>\n                                        </tr> )\n        }\n\n        else return null\n    }\n\n    const renderNamesList = () => {\n        if ( persons.length > 0 ) {\n            return (\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Amount</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { renderNames() }\n                    </tbody>\n                </table>\n            )\n        }\n\n        else return <p>No names found! Try another name.</p>\n    }\n\n    return (\n        <div id='namesListContainer'>{ renderNamesList() }</div>\n    )\n}\n\nexport default NamesList","import axios from 'axios'\n\nconst getNames = () => {\n    return axios.get( '/api/names' )\n}\n\nexport default { getNames }","import React, { useState, useEffect } from 'react'\nimport SortNames from './components/SortNames'\nimport TotalAmount from './components/TotalAmount'\nimport Filter from './components/Filter'\nimport NamesList from './components/NamesList'\nimport nameService from './services/nameService'\nimport './css/App.css'\nimport './css/SortNames.css'\nimport './css/TotalAmount.css'\nimport './css/Filter.css'\nimport './css/NamesList.css'\n\nconst App = () => {\n  const [ names, setNames ] = useState([])\n  // sortType = 'amount' OR 'alphabet' (defaults to 'amount')\n  const [ sortType, setSortType ] = useState( 'amount' )\n  const [ searchPhrase, setSearchPhrase ] = useState( '' )\n  const [ showAll, setShowAll ] = useState( true )\n\n  useEffect(() => {\n    nameService\n      .getNames()\n      .then( response => {\n        setNames( response.data )\n      })\n  }, [])\n\n  const handleSortType = () => {\n    setSortType( sortType === 'amount' ? 'alphabet' : 'amount' )\n  }\n\n  const handleSearch = ( event ) => {\n    setShowAll( false )\n    setSearchPhrase( event.target.value )\n    if ( event.target.value === '' ) setShowAll( true )\n  }\n\n  return (\n    <div id='appContainer'>\n      <h1>Most common names in Solita</h1>\n      <SortNames handleSortType={ handleSortType}></SortNames>\n      <Filter searchPhrase={ searchPhrase } handleSearch={ handleSearch }></Filter>\n      <NamesList names={ names }\n                 sortType={ sortType }\n                 showAll={ showAll }\n                 searchPhrase={ searchPhrase }\n                 handleSortType={ handleSortType }></NamesList>\n      <TotalAmount names={ names }></TotalAmount>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}